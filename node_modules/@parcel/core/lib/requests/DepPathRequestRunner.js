"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _AssetGraph = require("../AssetGraph");

var _RequestTracker = require("../RequestTracker");

var _ResolverRunner = _interopRequireDefault(require("../ResolverRunner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const invertMap = map => new Map([...map].map(([key, val]) => [val, key]));

class DepPathRequestRunner extends _RequestTracker.RequestRunner {
  constructor(opts) {
    super(opts);

    _defineProperty(this, "resolverRunner", void 0);

    _defineProperty(this, "assetGraph", void 0);

    this.type = 'dep_path_request';
    let {
      options,
      config,
      assetGraph
    } = opts;
    this.resolverRunner = new _ResolverRunner.default({
      options,
      config
    });
    this.assetGraph = assetGraph;
  }

  run(request) {
    return this.resolverRunner.resolve(request);
  }

  onComplete(request, result, api) {
    let dependency = request;
    let assetGroup = result;

    if (!assetGroup) {
      this.assetGraph.resolveDependency(dependency, null);
      return;
    }

    let defer = this.shouldDeferDependency(dependency, assetGroup.sideEffects);
    dependency.isDeferred = defer;
    let assetGroupNode = (0, _AssetGraph.nodeFromAssetGroup)(assetGroup, defer);
    let existingAssetGroupNode = this.assetGraph.getNode(assetGroupNode.id);

    if (existingAssetGroupNode) {
      // Don't overwrite non-deferred asset groups with deferred ones
      (0, _assert.default)(existingAssetGroupNode.type === 'asset_group');
      assetGroupNode.deferred = existingAssetGroupNode.deferred && defer;
    }

    this.assetGraph.resolveDependency(dependency, assetGroupNode);

    if (existingAssetGroupNode) {
      // Node already existed, that asset might have deferred dependencies,
      // recheck all dependencies of all assets of this asset group
      this.assetGraph.traverse((node, parent, actions) => {
        if (node == assetGroupNode) {
          return;
        }

        if (node.type === 'dependency' && !node.value.isDeferred) {
          actions.skipChildren();
          return;
        }

        if (node.type == 'asset_group') {
          (0, _assert.default)(parent && parent.type === 'dependency');

          if (node.deferred && !this.shouldDeferDependency(parent.value, node.value.sideEffects)) {
            parent.value.isDeferred = false;
            node.deferred = false;
            this.assetGraph.markIncomplete(node);
          }

          actions.skipChildren();
        }

        return node;
      }, assetGroupNode);
    } // ? Should this happen if asset is deferred?


    api.invalidateOnFileDelete(assetGroup.filePath); // TODO: invalidate dep path requests that have failed and a file creation may fulfill the request
  } // Defer transforming this dependency if it is marked as weak, there are no side effects,
  // no re-exported symbols are used by ancestor dependencies and the re-exporting asset isn't
  // using a wildcard and isn't an entry (in library mode).
  // This helps with performance building large libraries like `lodash-es`, which re-exports
  // a huge number of functions since we can avoid even transforming the files that aren't used.


  shouldDeferDependency(dependency, sideEffects) {
    let defer = false;

    if (dependency.isWeak && sideEffects === false && !dependency.symbols.has('*')) {
      let depNode = this.assetGraph.getNode(dependency.id);
      (0, _assert.default)(depNode);
      let assets = this.assetGraph.getNodesConnectedTo(depNode);
      let symbols = invertMap(dependency.symbols);
      (0, _assert.default)(assets.length === 1);
      let firstAsset = assets[0];
      (0, _assert.default)(firstAsset.type === 'asset');
      let resolvedAsset = firstAsset.value;
      let deps = this.assetGraph.getIncomingDependencies(resolvedAsset);
      defer = deps.every(d => !(d.env.isLibrary && d.isEntry) && !d.symbols.has('*') && ![...d.symbols.keys()].some(symbol => {
        let assetSymbol = resolvedAsset.symbols.get(symbol);
        return assetSymbol != null && symbols.has(assetSymbol);
      }));
    }

    return defer;
  }

}

exports.default = DepPathRequestRunner;